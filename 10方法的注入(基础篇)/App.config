<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<configSections>
		<sectionGroup name="spring">
			<section name="context" type="Spring.Context.Support.ContextHandler, Spring.Core" />
			<section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core" />
		</sectionGroup>
	</configSections>
	<spring>
		<context>
			<resource uri="config://spring/objects" />
		</context>
		<objects>
			<!--查询方法-->
			<object id="personDao" type="方法的注入.PersonDao, 10方法的注入(基础篇)" singleton="false"/>
			<object id="objectFactory" type="方法的注入.ObjectFactory, 10方法的注入(基础篇)">
				<lookup-method name="CreatePersonDao" object="personDao"/>
			</object>
			<!--　Spring.NET可以动态覆盖对象的抽象方法或虚方法，并且可以在容器内查找已命名对象，查询方法注入就利用了这些功能。个人感觉查询方法注入类似抽象工厂，为之不同的是，可以不用写抽象的实现代码，通过配置文件动态的切换组件。
　　在lookup-method节点配置name和object属性-->

			<!--替换方法-->
			<object id="userDao" type="方法的注入.UserDao, 10方法的注入(基础篇)">
				<replaced-method name="GetValue" replacer="replaceValue">
					<arg-type match="String"/>
				</replaced-method>
			</object>
			<object id="replaceValue" type="方法的注入.ReplaceValue, 10方法的注入(基础篇)"/>
			<!--首先继承IMethodReplacer接口并实现Implement方法，object[] arguments为传入的参数。其次在replaced-method节点配置name和replacer属性，和增加arg-type节点且配置返回类型match属性-->

			<!--事件注入-->
			<object id="men" type="方法的注入.Men, 10方法的注入(基础篇)">
				<listener event="OpenTheDoor" method="OpenThisDoor">
					<ref object="door"/>
				</listener>
			</object>
			<object id="door" type="方法的注入.Door, 10方法的注入(基础篇)" />
		</objects>
	</spring>
</configuration>